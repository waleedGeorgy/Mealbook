"use server";

import { redirect } from "next/navigation";
import { insertMeal } from "./meals";
import { revalidatePath } from "next/cache";

/*
In NextJS we can handle form submissions just like we do in React, by defining a function that handles submission
and attach it to `onSubmission` property of the `form` element.
BUT, Next offers a better way of handling form submissions, that also execute on the server. This is done
by defining a function and attaching it to the `action` property of the form. This async function must use the
`use server` directive, so that form submissions are handled on the server. These types of functions are called
"server actions".
This function accepts the form data that is submitted by the user, which we can capture and subsequently
define the logic that will handle the submission.
It is always better to outsource such actions to a separate file with a `use server` directive at the top,
so that it becomes possible to use both server and client capabilities when needed.
*/
// When using a server action as a part of the `useActionState()` hook it also must accept a previous state
export async function shareMeal(prevState, formData) {
  // Capturing the submitted data
  const meal = {
    title: formData.get("title"),
    summary: formData.get("summary"),
    instructions: formData.get("instructions"),
    image: formData.get("image"),
    creator: formData.get("name"),
    creator_email: formData.get("email"),
  };

  // Server-side input validation
  if (
    isInvalidInput(meal.title) ||
    isInvalidInput(meal.summary) ||
    isInvalidInput(meal.instructions) ||
    isInvalidInput(meal.creator) ||
    isInvalidInput(meal.creator_email) ||
    !meal.creator_email.includes("@") ||
    !meal.image ||
    meal.image.size === 0
  ) {
    /* Using the `useActionState()` hook we can return and capture responses generated by the server actions,
    in order to improve the UX, by showing a custom message without redirecting them an error page. */
    return {
      message: "Invalid input",
    };
  }

  await insertMeal(meal);
  /* On production servers, NextJS creates static pages of each page in our website and caches them, so the user,
  when browsing the website, will navigate between these static, pre-rendered pages, which improves navigation speed.
  But for dynamic pages this behavior is undesired (for example the browse meals page) since we need to update
  certain pages with new data that's being posted by the users.
  For that end, we use a NextJS function that allows us to revalidate a route on each visit (purge cached data for a
  specific path).
  The function `revalidatePath()` takes two arguments, the first one is the route that needs revalidating,
  the second one is optional and is responsible for making the revalidation possible for the exact route,
  or the route and all its subroutes. */
  revalidatePath("/meals", "page");
  redirect("/meals");
}

function isInvalidInput(text) {
  return !text || text.trim() === "";
}
